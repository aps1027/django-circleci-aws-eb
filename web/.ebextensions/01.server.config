# EB configs

commands:
  01_timezone:
    command: ln -nsf /usr/share/zoneinfo/Japan /etc/localtime
  02_swapon:
    command: |
      if (curl -s http://169.254.169.254/latest/meta-data/instance-type | grep -E "\.micro$" > /dev/null)
      then
      SWAPFILE=/tmp/swap.img
      test -e $SWAPFILE && exit 0
      MEMSIZE=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
      if [ $MEMSIZE -lt 2097152 ]; then
        SIZE=$((MEMSIZE * 1))k
      elif [ $MEMSIZE -lt 8388608 ]; then
        SIZE=${MEMSIZE}k
      elif [ $MEMSIZE -lt 67108864 ]; then
        SIZE=$((MEMSIZE / 2))k
      else
        SIZE=4194304k
      fi
      fallocate -l $SIZE $SWAPFILE && mkswap $SWAPFILE && chmod 0600 $SWAPFILE && swapon $SWAPFILE
      fi
  03_sysctl:
    command: |
      sysctl -w net.core.somaxconn=8192
container_commands:
  01_symlink_www:
    command: |
      ln -sf /var/app/current /var/www
files:
  "/etc/nginx/conf.d/proxy.conf":
      mode: "000644"
      owner: root
      group: root
      content: |
         client_max_body_size 650M;
  "/etc/nginx/sites-available/elasticbeanstalk-nginx-docker-proxy.conf":
      mode: "000644"
      owner: root
      group: root
      content: |
        map $http_upgrade $connection_upgrade {
            default        "upgrade";
            ""            "";
        }

        server {
            listen 80;

            gzip on;
            gzip_comp_level 4;
            gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

            if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
                set $year $1;
                set $month $2;
                set $day $3;
                set $hour $4;
            }
            access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;

            access_log    /var/log/nginx/access.log;

            location /static/ {
                alias /var/www/static/;
                autoindex off;
            }
            
            location / {
                proxy_pass            http://docker;
                proxy_http_version    1.1;

                proxy_set_header    Connection            $connection_upgrade;
                proxy_set_header    Upgrade                $http_upgrade;
                proxy_set_header    Host                $host;
                proxy_set_header    X-Real-IP            $remote_addr;
                proxy_set_header    X-Forwarded-For        $proxy_add_x_forwarded_for;
            }
        }